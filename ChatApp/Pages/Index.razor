@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    } 

    @foreach (var userMessage in userMessages)
    {
        <div class="row mb-3 d-flex @(userMessage.IsCurrentUser ? "justify-content-end" : "justify-content-start")">
            <div class="card shadow @(userMessage.IsCurrentUser ? "bg-light-green" : "bg-light-blue")" style="width: 18rem;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>@userMessage.UserName</span>
                    <span class="small text-muted">@userMessage.DateSent.ToString("HH:mm | MMM dd")</span>
                </div>
                <div class="card-body">
                    <p class="card-text">@userMessage.Message</p>
                </div>
            </div>
        </div>
    }

</div>

<div class="container">
    <div class="row">
        <div class="col-3"> 
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadonly"/>
        </div>
        <div class="col-6"> 
            <textarea @bind="messageInput" class="form-control" placeholder="Start typing..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>    
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<UserMessage> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadonly = false;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new UserMessage  { UserName = user, Message = message, IsCurrentUser = user == usernameInput, DateSent = DateTime.Now});

            InvokeAsync(StateHasChanged); 
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);

            isUserReadonly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
